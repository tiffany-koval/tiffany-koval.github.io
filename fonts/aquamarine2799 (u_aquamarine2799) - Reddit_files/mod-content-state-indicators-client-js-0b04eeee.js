import"./faceplate-tooltip-d3b1f57e.js";import{f as t,q as e,a as o,_ as s,n,e as r,W as a,r as i,b as d,c as p,l as c,k as l,g as u,aD as h,aE as m,o as b}from"./shell-091aa980.js";import{C as g}from"./comment-d06b644b.js";import{R as f}from"./modActions-a491b2e2.js";import{P as z}from"./postUpdate-c6c98b35.js";import{o as y,x as S,i as k,s as v,G as I,I as R,bw as U,l as C}from"./icon-bd54b9fa.js";import{l as w}from"./list-item-87b32fd6.js";import{f as P}from"./post-0ac2732b.js";import"./popper-controller-bcfd7f7f.js";import"./makeEventDispatcher-28989282.js";import"./post-d6ddae05.js";let j=class extends(t(v)){constructor(){super(...arguments),this.status=f.Reported,this.handlePostUpdate=({postId:t,action:e,value:o})=>{t===this.thingId&&e===z.ignoreReports&&(this.status=o?f.Ignored:f.Dismissed)},this.handleCommentUpdate=({commentId:t,action:e,value:o})=>{t===this.thingId&&e===g.ignoreReports&&(this.status=o?f.Ignored:f.Dismissed)}}connectedCallback(){super.connectedCallback(),this.subscribe(e.PostUpdated,this.handlePostUpdate),this.subscribe(e.CommentUpdated,this.handleCommentUpdate)}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribe(e.PostUpdated,this.handlePostUpdate),this.unsubscribe(e.CommentUpdated,this.handleCommentUpdate)}getStyle(){return y({"--list-icon-color":this.status===f.Reported?"var(--shreddit-color-mods-reported-onBackground)":"var(--color-secondary-onBackground)"})}render(){return this.status===f.Reported?S`<div class="bg-mods-reported-background hover:bg-mods-reported-background-hover" style="${this.getStyle()}"> <slot></slot> </div>`:S`<details class="max-w-fit bg-secondary-background hover:bg-secondary-background-hover" style="${this.getStyle()}"> <summary class="cursor-pointer block list-none" @click="${t=>t.stopPropagation()}"> <slot name="${this.status}"></slot> </summary> <slot></slot> </details>`}};j.styles=[k`summary::-webkit-details-marker{display:none}`,o],s([n({type:String,attribute:"thing-id"})],j.prototype,"thingId",void 0),s([n({type:String})],j.prototype,"status",void 0),j=s([r("reports-summary-wrapper")],j);const $=a(v);let x=class extends ${constructor(){super(...arguments),this.contentId="",this.isSnoozed=!1,this.reportReason="",this.pubsub=new i(this),this.onPostUpdateAction=t=>{if(t.postId!==this.contentId)return;const{action:e}=t;switch(e){case z.snoozeReporter:this.isSnoozed=!0;break;case z.unsnoozeReporter:this.isSnoozed=!1}},this.onCommentUpdateAction=t=>{if(t.commentId!==this.contentId)return;const{action:e}=t;switch(e){case g.snoozeReporter:this.isSnoozed=!0;break;case g.unsnoozeReporter:this.isSnoozed=!1}}}connectedCallback(){super.connectedCallback(),P(this.contentId)?this.pubsub.subscribe(e.PostUpdated,this.onPostUpdateAction):this.pubsub.subscribe(e.CommentUpdated,this.onCommentUpdateAction)}disconnectedCallback(){super.disconnectedCallback(),P(this.contentId)?this.pubsub.unsubscribe(e.PostUpdated,this.onPostUpdateAction):this.pubsub.unsubscribe(e.CommentUpdated,this.onCommentUpdateAction)}renderReportOverflowMenu(){return S` <mod-dropdown-closer> <faceplate-dropdown-menu @click="${t=>t.stopPropagation()}" position="bottom-end"> ${d({appearance:"plain",size:p.ExtraSmall,children:I({size:R.ExtraSmall})})} <faceplate-menu slot="menu"> ${w({label:this.isSnoozed?"Un-snooze reporter":"Snooze reporter",description:this.isSnoozed?"Receive reports from this user again":"Pause reports from this user for 7 days",leadingIcon:U({size:R.Small}),onClick:this.toggleSnooze})} </faceplate-menu> </faceplate-dropdown-menu> </mod-dropdown-closer> `}sendTrackingEvent(t,e,o){const s=o?"snoozereports":"unsnoozereports",n=P(t)?"post":"comment",r=P(t)?t:null,a=P(t)?null:t,i=c({source:"moderator",action:s,noun:n},{...r&&{post:{id:r}},...a&&{comment:{id:a}},...e&&{action_info:{reason:e}}});this.trackEvent(i)}showToast({success:t,isSnoozed:e}){const o=t?e?"Reports from these users will be paused":"Reports from these users will be resumed":"Failed to update reports",s=t?l.info:l.error,n=u("faceplate-alert",{level:s,message:o});this.dispatchEvent(n)}async updateReportState(t){try{const{data:e}=await h({operation:m.UpdateReportState,variables:{input:{itemId:this.contentId,reportText:this.reportReason,isSnoozed:t}}});return e?.updateReport?.ok??!1}catch(t){return!1}}async toggleSnooze(t){const o=!this.isSnoozed;this.sendTrackingEvent(this.contentId,this.reportReason,o);const s=await this.updateReportState(o);s&&(o?P(this.contentId)?this.pubsub.publish(e.PostUpdated,{postId:this.contentId,action:z.snoozeReporter,value:!0}):this.pubsub.publish(e.CommentUpdated,{commentId:this.contentId,action:g.snoozeReporter,value:!0}):P(this.contentId)?this.pubsub.publish(e.PostUpdated,{postId:this.contentId,action:z.unsnoozeReporter,value:!0}):this.pubsub.publish(e.CommentUpdated,{commentId:this.contentId,action:g.unsnoozeReporter,value:!0})),this.showToast({success:s,isSnoozed:this.isSnoozed})}render(){const t={"flex items-center m-0 p-0":!0,"bg-secondary-background":this.isSnoozed};return S`<li class="${b(t)}"> <slot name="${C(this.isSnoozed?"snoozed":void 0)}" class="flex-auto block"></slot> ${this.renderReportOverflowMenu()} </li> `}};x.styles=[o],s([n({type:String,attribute:"content-id"})],x.prototype,"contentId",void 0),s([n({type:Boolean,attribute:"is-snoozed"})],x.prototype,"isSnoozed",void 0),s([n({type:String,attribute:"report-reason"})],x.prototype,"reportReason",void 0),x=s([r("user-report-summary")],x);
//# sourceMappingURL=mod-content-state-indicators-client-js-0b04eeee.js.map
