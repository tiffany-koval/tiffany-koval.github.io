import{bl as e,_ as t,t as s,n as i,b4 as a,da as n,b9 as o,e as r,dc as l,ba as d}from"./shell-091aa980.js";import{f as h}from"./find-trigger-5b2cc0e2.js";import{I as c}from"./interaction-controller-daa20b2e.js";import{i as p,x as m,A as u}from"./icon-bd54b9fa.js";var v;!function(e){e.Collapsed="0",e.Expanded="1"}(v||(v={}));const x={[v.Collapsed]:"flex-nav-collapsed",[v.Expanded]:"flex-nav-expanded"};Object.values(v);let y=class extends n{constructor(){super(...arguments),this.isHovered=!1,this.hoverDelayStart=250,this.hoverDelayEnd=500,this.slottedElements=[],this.expandButton=null,this.collapseButton=null,this.gridTransitionComplete=null,this.trigger="hover",this.interactionController=new c(this,{hoverDelayStart:()=>this.hoverDelayStart,hoverDelayEnd:()=>this.hoverDelayEnd,isInteractedWith:e=>e.isHovered}),this.noAnimate=!1,this.parentGridSelector=".grid-container",this.handleSlotChange=e=>{const t=e.target;this.slottedElements=t.assignedElements().filter((e=>e instanceof HTMLElement))},this.handleButtonSlotChange=e=>t=>{const s=t.target,i=h(s.assignedElements()[0]);this[e]=i instanceof HTMLElement?i:null},this.handleExpandKeydown=async e=>{if("Tab"!==e.key)return;e.preventDefault();const t=document.querySelector("reddit-skip-to-sidebar")?.shadowRoot?.querySelector("a");if(t)return this.emitter.dispatch("focus-delegate",{detail:{el:t}}),t.focus();const s=document.getElementById("shreddit-skip-link");s instanceof HTMLElement&&(this.emitter.dispatch("focus-delegate",{detail:{el:s}}),s.focus())}}get isExpanded(){return this.expanded===v.Expanded}set slottedElementsVisibility(e){this.slottedElements.map((t=>t.hidden=!e))}connectedCallback(){super.connectedCallback(),this.isExpanded||this.updateComplete.then((()=>this.slottedElementsVisibility=!1)),this.addEventListener("mouseleave",this.interactionController.handleMouseLeave)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("mouseleave",this.interactionController.handleMouseLeave)}willUpdate(e){e.has("expanded")&&this.hasUpdated&&this.handleExpandedStateChanged(),super.willUpdate(e)}async handleExpandedStateChanged(){this.emitter.dispatch(this.isExpanded?"expand":"collapse");const e=this.updateComplete;e.then((async()=>{(this.isExpanded?this.collapseButton:this.expandButton)?.focus()})),await E(this.slottedElements),this.isExpanded&&(this.slottedElementsVisibility=!0),this.isHovered?null!==this.gridTransitionComplete&&this.gridTransitionComplete.then((()=>{this.emitter.dispatch("after-grid-transition"),this.isHovered=!1,this.classList.remove("hovered")})):await f(this.slottedElements,o(this,"flex-left-nav-container."+(this.isExpanded?"show":"hide"))),this.isExpanded||(this.slottedElementsVisibility=!1),await e,this.emitter.dispatch(this.isExpanded?"after-expand":"after-collapse")}toggleState(t){const s=document.querySelector(this.parentGridSelector);var i,a;void 0!==this.country&&void 0!==this.expanded&&s&&(this.expanded=this.isExpanded?v.Collapsed:v.Expanded,s instanceof HTMLElement&&(this.gridTransitionComplete=g(s)),s.classList.remove(...Object.values(x)),s.classList.add(x[this.expanded]),i=this.expanded,a=this.country,e({name:"hui_flex_nav_expanded_state",value:i,country:a}))}async startInteraction(){this.isExpanded||this.isHovered||(this.emitter.dispatch("hover"),this.slottedElementsVisibility=!0,this.isHovered=!0,await E(this.slottedElements),this.classList.add("hovered"),this.emitter.dispatch("after-hover"))}async finishInteraction(){if(this.isExpanded||!this.isHovered)return;this.emitter.dispatch("unhover"),await E(this.slottedElements);const e=g(this.slottedElements);this.classList.remove("hovered"),await e,this.slottedElementsVisibility=!1,this.isHovered=!1,this.emitter.dispatch("after-unhover")}render(){return m` <slot @click="${this.toggleState}" @slotchange="${this.handleButtonSlotChange("collapseButton")}" name="collapse-button"></slot> <slot @click="${this.toggleState}" @keydown="${this.handleExpandKeydown}" @slotchange="${this.handleButtonSlotChange("expandButton")}" name="expand-button"></slot> <slot @slotchange="${this.handleSlotChange}" @mouseenter="${this.interactionController.handleMouseEnter}"></slot> ${this.isExpanded?u:m`<div class="hoverable-target ${this.isHovered?"hovered":""}" @mouseenter="${this.interactionController.handleMouseEnter}"></div>`} `}};y.styles=p`.hoverable-target{width:calc(100% + 16px);margin-top:calc(32px + 16px);height:calc(100% - (32px + 16px));cursor:pointer}.hoverable-target.hovered{position:absolute;margin-top:0;width:calc(272px + 16px);height:calc(100dvh - var(--shreddit-header-height));cursor:auto}`,t([s()],y.prototype,"isHovered",void 0),t([i({type:String,reflect:!0})],y.prototype,"expanded",void 0),t([i({type:String})],y.prototype,"country",void 0),t([i({type:Boolean})],y.prototype,"noAnimate",void 0),t([i({type:String})],y.prototype,"parentGridSelector",void 0),y=t([r("flex-left-nav-container")],y);const E=async e=>Promise.all(e.map(l)),f=async(e,t)=>{Promise.all(e.map((e=>d(e,t.keyframes,t.options))))},g=(e,t=400)=>{const s=e=>new Promise((s=>{e.addEventListener("transitionend",s),e.addEventListener("transitioncancel",s),setTimeout(s,t)}));return Array.isArray(e)?Promise.all(e.map(s)):s(e)};a("flex-left-nav-container.show",{keyframes:[{opacity:0,transform:"translateX(-50%)"},{opacity:1,transform:"translateX(0%)"}],options:{duration:250,easing:"cubic-bezier(0.65, 0, 0.35, 1)"}}),a("flex-left-nav-container.hide",{keyframes:[{opacity:1,transform:"translateX(0%)"},{opacity:0,transform:"translateX(-50%)"}],options:{duration:300,easing:"cubic-bezier(0.87, 0, 0.13, 1)"}});
//# sourceMappingURL=hui-grid-client-js-c60ea8d4.js.map
