import{aD as e,aE as t,aW as i,W as s,f as n,g as o,k as a,q as r,a as d,_ as c,n as l,t as h,e as u,e_ as p,c$ as b,hf as m,b as g,c as f,a4 as v,aP as k,l as y,hg as S,hh as I,hi as w,hj as E,A as C,w as N,r as T}from"./shell-091aa980.js";import{n as x,i as U,a as _,u as L,b as P,c as D,d as A,N as B,e as O,f as R,g as M,h as H,j,k as $,m as F,l as V,o as q,p as Y}from"./announcement-remove-list-item-9e71e8cf.js";import{A as z,x as J,s as W,an as G,I as K,M as Q}from"./icon-bd54b9fa.js";import{p as X,s as Z}from"./utils-d6e6878a.js";import{l as ee}from"./list-item-87b32fd6.js";import"./faceplate-dropdown-menu-b5e8e95c.js";import"./faceplate-menu-a7640ba3.js";import"./shreddit-spoiler-47a8899e.js";import"./shreddit-share-list-item-ae5ff860.js";import"./faceplate-date-210d2b75.js";import"./faceplate-number-7de2957e.js";import"./index-18b99d92.js";import"./popper-controller-bcfd7f7f.js";import"./makeEventDispatcher-28989282.js";import"./with-share-b2ff4c86.js";import"./a-d374470c.js";import"./content-action-button-e82981b8.js";import"./index-6b6f75e3.js";import"./locale-e49f0b05.js";import"./number-ea0536b9.js";import"./cached-intl-e5b35306.js";const te=new Set([i.CommentReply,i.PostReply,i.PrivateMessage,i.UsernameMention]);function ie(e,t,i){window.Sentry?.captureMessage?.(`Unexpected inbox mark as read error id: ${t}, type: ${i}, err: ${JSON.stringify(e)}`)}let se=class extends(s(n(W))){constructor(){super(...arguments),this.isViewed=!1,this.isDeletedPost=!1,this.isRemovedPost=!1,this.notificationId="",this.messageType="",this.hasLink="",this.isHidden=!1,this.observer=null,this.handleVisibilityChange=([{isIntersecting:e}])=>{e&&!this.isViewed&&(this.trackEvent(x(this.getTrackEventProperties())),this.isViewed=!0,this.observer?.disconnect())},this.hideIfIsSelf=e=>{e===this.notificationId&&this.hide()},this.hide=()=>this.isHidden=!0,this.onClick=async e=>{(!this.hasLink||this.isDeletedPost||this.isRemovedPost||U(e))&&e.preventDefault();return!!e.target?.closest("notification-context-menu")||this.trackEvent(_({...this.getTrackEventProperties(),clickTarget:"notification"})),this.isDeletedPost?this.showAlert({message:"Sorry this post was deleted"}):this.isRemovedPost&&this.showAlert({message:"This content is no longer available"}),await this.fireReadEvent(),!1},this.getUnreadChildElement=()=>this.querySelector(`.${L}`),this.fireReadEvent=async()=>{this.getUnreadChildElement()&&(this.removeUnreadState(),await async function(i,s){if(i)try{let n;te.has(s)?(n=await e({operation:t.MarkPrivateMessageAsRead,variables:{input:{messageId:i}}}),ie(n.data.markPrivateMessageAsRead?.errors,i,s)):(n=await e({operation:t.MarkNotificationRead,variables:{input:{notificationId:i}}}),ie(n.data.readNotificationLoggedIn?.errors,i,s))}catch(e){}}(this.notificationId,this.messageType))},this.removeUnreadState=()=>this.getUnreadChildElement()?.classList.remove(L),this.showAlert=({message:e})=>this.dispatchEvent(o("faceplate-alert",{level:a.warning,message:e})),this.getTrackEventProperties=()=>({notificationType:this.messageType,notificationId:this.notificationId,isViewed:this.isViewed,isClicked:!!this.getUnreadChildElement()})}connectedCallback(){super.connectedCallback(),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector(`[data-id="${P}"]`),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.observer?.disconnect()}firstUpdated(){this.trackEvent(D(this.getTrackEventProperties())),this.querySelector("a")?.addEventListener("click",this.onClick),this.subscribe(r.NotificationInboxNotificationHideEvent,this.hideIfIsSelf),this.subscribe(r.InboxReadAllEvent,this.removeUnreadState)}render(){return this.isHidden?z:J`<slot></slot>`}};se.styles=[d],c([l({type:Boolean,attribute:"is-viewed",reflect:!0})],se.prototype,"isViewed",void 0),c([l({type:Boolean,attribute:"is-deleted-post"})],se.prototype,"isDeletedPost",void 0),c([l({type:Boolean,attribute:"is-removed-post"})],se.prototype,"isRemovedPost",void 0),c([l({type:String,attribute:"notification-id"})],se.prototype,"notificationId",void 0),c([l({type:String,attribute:"message-type"})],se.prototype,"messageType",void 0),c([l({type:Boolean,attribute:"has-link"})],se.prototype,"hasLink",void 0),c([h()],se.prototype,"isHidden",void 0),se=c([u("notification-item")],se);function ne({currentStorageData:e,userId:t,inboxBannerName:i}){return e?.[t]?.find((e=>e.inboxBannerName===i))?.seenCount??0}function oe({userId:e,inboxBannerName:t,seenCount:i,currentStorageData:s={}}){const n={...s||{},[e]:[{inboxBannerName:t,seenCount:i}]};Z("inbox_banner_seen_count_store",n)}let ae=class extends W{constructor(){super(...arguments),this.isHidden=!1,this.colorMap={},this.hide=e=>{e.preventDefault(),this.isHidden=!0,this.userId&&this.name&&this.maxViews&&function({userId:e,inboxBannerName:t,seenCount:i}){oe({userId:e,currentStorageData:X("inbox_banner_seen_count_store"),inboxBannerName:t,seenCount:i})}({userId:this.userId,inboxBannerName:this.name,seenCount:this.maxViews})},this.onClick=e=>{U(e)&&e.preventDefault()}}firstUpdated(){if(this.querySelectorAll(`[data-id="${A}"`).forEach((e=>e.addEventListener("click",this.hide))),this.querySelectorAll("a").forEach((e=>e.addEventListener("click",this.onClick))),Object.entries(this.colorMap).forEach((([e,t])=>{this.style.setProperty(`--${e}`,t)})),this.userId&&this.name){const e=function({userId:e,inboxBannerName:t}){return ne({userId:e,inboxBannerName:t,currentStorageData:X("inbox_banner_seen_count_store")})}({userId:this.userId,inboxBannerName:this.name});void 0!==this.maxViews&&e>=this.maxViews?this.isHidden=!0:function({userId:e,inboxBannerName:t}){const i=X("inbox_banner_seen_count_store");oe({userId:e,currentStorageData:i,inboxBannerName:t,seenCount:ne({userId:e,inboxBannerName:t,currentStorageData:i})+1})}({userId:this.userId,inboxBannerName:this.name})}}render(){return this.isHidden?z:J`<slot></slot>`}};ae.styles=[d],c([h()],ae.prototype,"isHidden",void 0),c([l({type:Object})],ae.prototype,"colorMap",void 0),c([l({type:String,attribute:"user-id"})],ae.prototype,"userId",void 0),c([l({type:String})],ae.prototype,"name",void 0),c([l({type:Number,attribute:"max-views"})],ae.prototype,"maxViews",void 0),ae=c([u("notification-inbox-banner")],ae);const re=({notificationLevel:e,isEnablingUpdates:t})=>{if(t)switch(e){case p.Off:case null:return p.Low;case p.Low:case p.Frequent:default:return p.Frequent}else switch(e){case p.Frequent:return p.Low;case p.Low:default:return p.Off}};let de=class extends(s(n(W))){constructor(){super(...arguments),this.messageType="",this.notificationLevel=null,this.notificationId="",this.userId="",this.userName="",this.postId="",this.commentId="",this.subredditId="",this.subredditName="",this.isHideEligible=!1,this.isToggleUpdateFromSubredditEligible=!1,this.isToggleNotificationUpdateEligible=!1,this.isToggleLowUpdateFromSubredditEligible=!1,this.initialNotificationLevel=null,this.isNotificationLevelOff=()=>!this.notificationLevel||this.notificationLevel===p.Off,this.getIsRead=()=>!this.closest("notification-item")?.querySelector(`.${L}`),this.shouldRenderHide=()=>this.isHideEligible,this.shouldRenderDisableUpdates=()=>this.isToggleNotificationUpdateEligible&&(this.postId||this.commentId),this.shouldRenderDisableUpdatesFromSubreddit=()=>this.subredditId&&this.isToggleUpdateFromSubredditEligible,this.shouldRenderBlockThisUser=()=>this.userId&&this.userName&&this.messageType&&[i.ChatAcceptInvite,i.ChatMessage,i.ChatMessageReaction,i.ChatRequest,i.AwardReceived].includes(this.messageType),this.shouldRenderSeeLessFromSubreddit=()=>this.subredditId&&this.isToggleLowUpdateFromSubredditEligible,this.hideNotification=async()=>{try{if((await e({operation:t.DeleteInboxNotifications,variables:{input:{notificationIds:[this.notificationId]}}})).data.deleteInboxNotifications?.ok)return this.showAlert({level:a.notice,message:"Success! You won't see updates on this in the future"}),void this.publish(r.NotificationInboxNotificationHideEvent,this.notificationId)}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesFromSubreddit=async i=>{try{this.notificationLevel=i?this.initialNotificationLevel:p.Off;if((await e({operation:t.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:i,isSubredditUpdatesInterestingPostEnabled:!this.isNotificationLevelOff()}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:B.HideSubreddit,isDo:!i,doConfig:{message:"Success! You won't see updates from this subreddit in the future.",undoOnClick:()=>this.changeUpdatesFromSubreddit(!0)},undoConfig:{message:"Success! Hiding updates from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=i?p.Off:this.initialNotificationLevel,this.showAlert({})},this.changeSeeLessFromSubreddit=async i=>{this.notificationLevel=re({isEnablingUpdates:i,notificationLevel:this.notificationLevel});try{if((await e({operation:t.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:!this.isNotificationLevelOff(),isSubredditUpdatesInterestingPostEnabled:i}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:B.DisableNotificationType,isDo:!i,doConfig:{message:"Success! You'll see less from this subreddit in the future.",undoOnClick:()=>this.changeSeeLessFromSubreddit(!0)},undoConfig:{message:"Success! Seeing less from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=re({isEnablingUpdates:!i,notificationLevel:this.notificationLevel}),this.showAlert({})},this.changeUpdatesOnThisPost=async i=>{try{if((await e({operation:t.UpdatePostSendRepliesState,variables:{input:{postId:this.postId,sendRepliesState:i?b.Send:b.DoNotSend}}})).data.updatePostSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:B.HideUpdates,isDo:!i,doConfig:{message:"Success! You won't see updates on this post in the future.",undoOnClick:()=>this.changeUpdatesOnThisPost(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesOnThisComment=async i=>{try{if((await e({operation:t.UpdateCommentSendRepliesState,variables:{input:{commentId:this.commentId,sendRepliesState:i?b.Send:b.DoNotSend}}})).data.updateCommentSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:B.HideUpdates,isDo:!i,doConfig:{message:"Success! You won't see updates on this comment in the future.",undoOnClick:()=>this.changeUpdatesOnThisComment(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUserBlockStatus=async i=>{try{if((await e({operation:t.UpdateRedditorBlockState,variables:{input:{redditorId:this.userId,blockState:i}}})).data.updateRedditorBlockState?.ok)return void this.handleAlerts({actionInfoType:B.BlockUser,isDo:i===m.Blocked,doConfig:{message:`u/${this.userName} is now blocked.`,undoOnClick:()=>this.changeUserBlockStatus(m.None)},undoConfig:{message:`u/${this.userName} is now unblocked.`}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.handleAlerts=({isDo:e,actionInfoType:t,doConfig:i,undoConfig:s})=>{e?this.showAlert({level:a.notice,message:i.message,undoOnClick:i.undoOnClick,actionInfoType:t}):this.showAlert({level:a.notice,message:s.message})},this.showAlert=({level:e=a.error,message:t="Something went wrong",undoOnClick:i,actionInfoType:s})=>this.dispatchEvent(o("faceplate-alert",{level:e,message:t,namedContent:i&&s?{action:g({children:"Undo",attributes:{onclick:()=>{i(),this.trackEvent($(this.getTrackClickOptionProperties(s)))}}})}:void 0})),this.renderHideThisNotification=()=>this.renderMenuElement({label:"Hide",onClick:()=>(this.trackEvent(O(this.getTrackClickOptionProperties(B.HideNotification))),this.hideNotification()),dataTestId:"hide-this-notification"}),this.renderDisableUpdates=()=>this.renderMenuElement({label:"Turn off this type of notification",onClick:()=>(this.trackEvent(O(this.getTrackClickOptionProperties(B.HideUpdates))),this.postId?this.changeUpdatesOnThisPost(!1):this.changeUpdatesOnThisComment(!1)),dataTestId:"block-updates-from-post-or-comment"}),this.renderDisableUpdatesFromSubreddit=()=>this.renderMenuElement({label:this.subredditName?`Turn off r/${this.subredditName} notifications`:"Disable updates from this community",onClick:()=>(this.trackEvent(O(this.getTrackClickOptionProperties(B.HideSubreddit))),this.changeUpdatesFromSubreddit(!1)),dataTestId:"block-updates-from-subreddit"}),this.renderBlockThisUser=()=>this.renderMenuElement({label:"Block this user ",onClick:()=>(this.trackEvent(O(this.getTrackClickOptionProperties(B.BlockUser))),this.changeUserBlockStatus(m.Blocked)),dataTestId:"block-user"}),this.renderSeeLessFromSubreddit=()=>this.renderMenuElement({label:"See less from this community",onClick:()=>(this.trackEvent(O(this.getTrackClickOptionProperties(B.DisableNotificationType))),this.changeSeeLessFromSubreddit(!1)),dataTestId:"see-less"}),this.renderMenuElement=({label:e,onClick:t,dataTestId:i})=>J` ${ee({onClick:t,label:e,attributes:{role:"menuitem","data-testid":i}})} `,this.onOpenMenu=()=>this.trackEvent(R(this.getTrackEventProperties())),this.getTrackClickOptionProperties=e=>({...this.getTrackEventProperties(),action_info_type:e}),this.getTrackEventProperties=()=>({notificationId:this.notificationId,notificationType:this.messageType,isViewed:!0,isClicked:this.getIsRead()})}render(){const e=[this.shouldRenderHide()?this.renderHideThisNotification():null,this.shouldRenderSeeLessFromSubreddit()?this.renderSeeLessFromSubreddit():null,this.shouldRenderDisableUpdates()?this.renderDisableUpdates():null,this.shouldRenderBlockThisUser()?this.renderBlockThisUser():null,this.shouldRenderDisableUpdatesFromSubreddit()?this.renderDisableUpdatesFromSubreddit():null].filter(Boolean);return 0===e.length?z:J` <faceplate-dropdown-menu position="bottom-end"> ${g({appearance:"plain",attributes:{"aria-label":"Open notification actions"},leadingIcon:G({size:K.Small}),size:f.Small})} <faceplate-tracker slot="menu" source="${M}" action="view" noun="${H}" data-faceplate-tracking-context="${JSON.stringify(j(this.getTrackEventProperties()))}"> <faceplate-menu slot="menu" class="block bg-neutral-background"> ${e} </faceplate-menu> </faceplate-tracker> </faceplate-dropdown-menu> `}};de.styles=[d],c([l({type:String,attribute:"message-type"})],de.prototype,"messageType",void 0),c([l({type:String,attribute:"notification-level",reflect:!0})],de.prototype,"notificationLevel",void 0),c([l({type:String,attribute:"notification-id"})],de.prototype,"notificationId",void 0),c([l({type:String,attribute:"user-id"})],de.prototype,"userId",void 0),c([l({type:String,attribute:"user-name"})],de.prototype,"userName",void 0),c([l({type:String,attribute:"post-id"})],de.prototype,"postId",void 0),c([l({type:String,attribute:"comment-id"})],de.prototype,"commentId",void 0),c([l({type:String,attribute:"subreddit-id"})],de.prototype,"subredditId",void 0),c([l({type:String,attribute:"subreddit-name"})],de.prototype,"subredditName",void 0),c([l({type:Boolean,attribute:"is-hide-eligible"})],de.prototype,"isHideEligible",void 0),c([l({type:Boolean,attribute:"is-toggle-update-from-subreddit-eligible"})],de.prototype,"isToggleUpdateFromSubredditEligible",void 0),c([l({type:Boolean,attribute:"is-toggle-notification-update-eligible"})],de.prototype,"isToggleNotificationUpdateEligible",void 0),c([l({type:Boolean,attribute:"is-toggle-low-update-from-subreddit-eligible"})],de.prototype,"isToggleLowUpdateFromSubredditEligible",void 0),de=c([u("notification-context-menu")],de);let ce=class extends v{constructor(){super(...arguments),this.trackExitEvent=()=>{this.trackEvent()}}get miniInboxTooltip(){return document.querySelector(`#${F}`)}connectedCallback(){super.connectedCallback(),this.source=M,this.action="exit",this.noun="mini_inbox",this.miniInboxTooltip?.addEventListener(this.closeEventName,this.trackExitEvent)}disconnectedCallback(){super.disconnectedCallback(),this.miniInboxTooltip?.removeEventListener(this.closeEventName,this.trackExitEvent)}get closeEventName(){return`${this.miniInboxTooltip?.tagName.toLowerCase()}:close`}};ce=c([u("notification-inbox-exit-tracker")],ce);let le=class extends(s(W)){constructor(){super(...arguments),this.fireReadAll=async()=>{try{this.trackEvent(V({badgeCount:this.getUnreadCount()})),k(r.InboxReadAllEvent),k(r.InboxCountChanged,0);(await e({operation:t.MarkPrivateMessageAsRead,variables:{input:{}}})).data.markPrivateMessageAsRead?.ok||this.dispatchErrorMessage()}catch(e){this.dispatchErrorMessage()}},this.getUnreadCount=()=>document.querySelector(`[data-id="${q}"]`)?.getCount()??0,this.dispatchErrorMessage=()=>{this.dispatchEvent(o("faceplate-alert",{level:a.error,message:"Something went wrong while marking all notifications as read"}))}}firstUpdated(){this.querySelector("*")?.addEventListener("click",this.fireReadAll)}render(){return J` <slot></slot> `}};le=c([u("mark-all-messages-read")],le);let he=class extends W{constructor(){super(...arguments),this.initialMessagesCount=0}async firstUpdated(){k(r.InboxCountChanged,this.initialMessagesCount),this.initialMessagesCount?navigator.setAppBadge?.(this.initialMessagesCount):navigator.clearAppBadge?.(),await e({operation:t.UpdateInboxActivitySeenState,variables:{input:{lastSentAt:(new Date).toISOString()}}})}render(){return z}};c([l({type:Number,attribute:"initial-messages-count"})],he.prototype,"initialMessagesCount",void 0),he=c([u("mark-all-notifications-seen")],he);const ue=e=>y({source:"popup",action:e,noun:"desktop_notification_permissions"}),pe="Notification"in globalThis?Notification:null;let be=class extends(s(W)){constructor(){super(),this.variant="banner_once",this.statusPending=!0,this._notificationApi=pe,this._swAPI=navigator.serviceWorker,this.onEnable=async()=>{await this._setupPushNotifications()?(this.trackEvent(ue("allow")),this.trackEvent(y({source:"overlay",action:"auto_dismiss",noun:"desktop_notification_permissions"})),this.remove()):await this._getPushNotificationStatus()===S.Blocked&&this.trackEvent(ue("block"))},this.onDecline=()=>{this.trackEvent(ue("close"));const e=this._getLocalStorage()||{};e.last_dismissed=Date.now(),this._setLocalStorage(e),this.remove()},this.onClose=()=>{this.trackEvent(ue("close")),this.remove()}}async connectedCallback(){super.connectedCallback();const e=await this._getPushNotificationStatus();switch(this.statusPending=!1,e){case S.Blocked:case S.Error:this._unsubscribePushSubscription()}if(this.isThrottled())return this.remove();switch(e){case S.Blocked:case S.Pending:case S.NoSubscription:case S.Error:return this._checkAndUpdateLocalStorage(),void this.trackEvent(ue("view"));case S.NoServiceWorker:case S.NoPushManager:case S.NoNotificationAPI:case S.Enabled:return this.remove()}}_getPushNotificationStatus(){return I(this._swAPI,this._notificationApi)}_setupPushNotifications(){return w(this._swAPI,this._notificationApi)}_unsubscribePushSubscription(){return E(this._swAPI)}_getLocalStorage(){return JSON.parse(C.getItem("pn_banner_state")??"null")}_setLocalStorage(e){return C.setItem("pn_banner_state",JSON.stringify(e))}_checkAndUpdateLocalStorage(){const e=this._getLocalStorage()??{};(!e.last_seen||Date.now()-e.last_seen>36e5)&&(e.last_seen=Date.now(),this._setLocalStorage(e))}isThrottled(){const e=this._getLocalStorage();if(!e)return!1;if(!e.last_dismissed&&!e.last_seen)return!1;if(e.last_seen&&!e.last_dismissed){const t=Date.now()-e.last_seen;if(t>36e5&&t<828e5)return!0}if(!e.last_dismissed)return!1;switch(this.variant){case"banner_once":return!0;case"banner_weekly":return Date.now()-e.last_dismissed<6012e5;case"banner_monthly":return Date.now()-e.last_dismissed<24156e5}return!1}render(){return this.statusPending?z:J` <div class="rounded-sm border-sm border-tone-4 border-solid p-md mx-md mb-md relative"> <p class="font-semibold text-20 my-0"> Enable Push Notifications ${g({appearance:"secondary",shape:"pill",leadingIcon:Q({size:K.ExtraSmall}),size:f.ExtraSmall,attributes:{"aria-label":"Dismiss push notification prompt",className:"absolute top-xs right-xs",onclick:this.onClose}})} </p> <p class="text-14"> Don't miss out on updates. </p> <div class="flex flex-row gap-lg"> ${g({appearance:"primary",attributes:{onclick:this.onEnable},children:"Turn On"})} ${g({appearance:"secondary",attributes:{onclick:this.onDecline},children:"No Thanks"})} </div> </div> `}};be.styles=d,c([l()],be.prototype,"variant",void 0),c([N("rpl-dialog")],be.prototype,"unblockDialog",void 0),c([h()],be.prototype,"statusPending",void 0),be=c([u("shreddit-pn-banner")],be);let me=class extends(s(W)){constructor(){super(...arguments),this.announcementId="",this.isHidden=!1,this.observer=null,this.pubsub=new T(this),this.onClick=e=>{U(e)?e.preventDefault():this.removeUnreadState()},this.onHide=e=>{e===this.announcementId&&(this.isHidden=!0)},this.handleVisibilityChange=([{isIntersecting:e}])=>{if(e){const{title:e="",body:t=""}=this.notificationTelemetryData??{};this.trackEvent(D({notificationType:Y,notificationId:this.announcementId,isViewed:!0,isClicked:!this.unreadChildElement,title:e,body:t})),this.observer?.disconnect()}},this.removeUnreadState=()=>this.unreadChildElement?.classList.remove(L)}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this.onClick),this.pubsub.subscribe(r.NotificationInboxNotificationHideEvent,this.onHide),this.pubsub.subscribe(r.InboxReadAllEvent,this.removeUnreadState),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector(`[data-id="${P}"]`),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("click",this.onClick),this.pubsub.unsubscribe(r.NotificationInboxNotificationHideEvent,this.onHide),this.pubsub.unsubscribe(r.InboxReadAllEvent,this.removeUnreadState),this.observer?.disconnect()}get unreadChildElement(){return this.querySelector(`.${L}`)}render(){return this.isHidden?z:J`<slot></slot>`}};me.styles=[d],c([l({type:String,attribute:"announcement-id"})],me.prototype,"announcementId",void 0),c([l({type:Object,attribute:"notification-telemetry-data"})],me.prototype,"notificationTelemetryData",void 0),c([h()],me.prototype,"isHidden",void 0),me=c([u("notification-announcement")],me);
//# sourceMappingURL=notifications-inbox-client-js-dc814e22.js.map
